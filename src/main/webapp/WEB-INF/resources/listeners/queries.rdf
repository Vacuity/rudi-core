<?xml version="1.0" encoding="UTF-8" ?>
<rdf:RDF xml:base="http://www.vacuity.ai/onto/instances"
     xmlns:via="http://www.vacuity.ai/onto/via/1.0/"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
 >	
	 
 	<via:TupleQuery rdf:about="#get_listener">
		<rdfs:label>Get Listeners</rdfs:label>
 		<via:sparql>
 		
# via:imports, and via:contexts are pulled in a separate fetch
 		
<![CDATA[
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?listener ?override ?input ?pattern ?i_labels ?qtype ?context ?output ?config ?translator ?log ?replyTypeProp ?endpoint ?mediaType ?query where {
  
  ?listener rdf:type via:Listener .
  ?listener via:event ?input .
  OPTIONAL {?listener via:override ?override .}
  ?input via:labels ?i_labels .
  {
  	# rdf:first patterns are collected in a separate fetch using rdf4j's Connections.getRDFCollection
   	{?input via:pattern ?pattern .}
   	UNION
	{
	  	?input rdf:type ?qtype .
	  	?qtype rdfs:subClassOf via:Query .
    }
  }
  ?listener via:notify ?output .
  ?output via:log ?log .
  ?output via:config ?config .

	{
		{
	  		?output ?replyTypeProp ?endpoint .
	  		?replyTypeProp rdfs:subPropertyOf via:serviceReplyType .
	  		?replyTypeProp rdfs:label ?mediaType .
	  		OPTIONAL {?output via:translator ?translator .}
  		}	
  		UNION 
  		{
	  		?output via:execute ?query .
  		}
  	
  
	}
}
]]>
		</via:sparql>
	</via:TupleQuery>
	
 	<via:TupleQuery rdf:about="#get_subscriptions">
		<rdfs:label>get_subscriptions</rdfs:label>
 		<via:sparql>
<![CDATA[
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?listener ?i_query ?i_query_label ?notifies where {
  
  ?listener rdf:type via:Listener .
  ?listener via:notify ?notifies .    
  ?listener via:event ?i_query . 
  ?i_query rdf:type ?qtype .
  ?qtype rdfs:subClassOf via:Query .
  ?i_query rdfs:label ?i_query_label .
  
}
]]>
		</via:sparql>
	</via:TupleQuery>
	
 	<via:TupleQuery rdf:about="#get_adaptor_with_capture-hold">
		<rdfs:label>get_adaptor_with_capture-hold</rdfs:label>
 		<via:sparql>
<![CDATA[
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?adaptor ?pattern ?i_label ?i_query ?capturePropertyType ?config ?translator ?log ?replyTypeProp ?call ?mediaType ?query where {
  
  ?adaptor rdf:type via:Adaptor .
  ?adaptor via:i ?input .
  ?input ?c ?i_label .
  ?c rdfs:subPropertyOf via:label .
  ?adaptor via:o ?output .
  ?output via:config ?config .
  OPTIONAL {?output via:translator ?translator .}
  ?output via:log ?log .
  ?output ?replyTypeProp ?call .
  ?replyTypeProp rdfs:subPropertyOf via:serviceReplyType .
  ?replyTypeProp rdfs:label ?mediaType .

  OPTIONAL {?output via:query ?query .}
  
}
]]>
		</via:sparql>
	</via:TupleQuery>	
	
 	<via:TupleQuery rdf:about="#get_adaptor_output">
		<rdfs:label>get_adaptor_output</rdfs:label>
 		<via:sparql>
<![CDATA[
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?adaptor ?pattern ?i_label ?config ?translator ?log ?replyTypeProp ?call where {
  
  ?adaptor rdf:type via:Adaptor .
  ?adaptor via:i ?input .
  ?input via:pattern ?pattern .
  ?input ?c ?i_label .
  ?c rdfs:subPropertyOf via:capture .
  ?adaptor via:o ?output .
  ?output via:config ?config .
  ?output via:translator ?translator .
  ?output via:log ?log .
  ?output ?replyTypeProp ?call .
  ?replyTypeProp rdfs:subPropertyOf via:serviceReplyType .

}
]]>
		</via:sparql>
	</via:TupleQuery>
	<via:TupleQuery rdf:about="#get_pattern_labels">
		<rdfs:label>get_pattern_labels</rdfs:label>
 		<via:sparql>
<![CDATA[
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX vi: <http://www.vacuity.ai/onto/instances#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?pattern ?i_label where {
  ?input via:pattern ?pattern .
  ?input ?c ?i_label .
  ?c rdfs:subPropertyOf via:capture .
}
]]>
		</via:sparql>
	</via:TupleQuery>
	
	<via:TupleQuery rdf:about="#get_endpoint_labels">
		<rdfs:label>get_endpoint_labels</rdfs:label>
 		<via:sparql>
<![CDATA[
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX vi: <http://www.vacuity.ai/onto/instances#>
select distinct ?x ?y where {
	?x via:config ?y .
}
]]>
		</via:sparql>
	</via:TupleQuery>
	
	
	
	
	<via:TupleQuery rdf:about="#get_queries">
		<rdfs:label>get_queries</rdfs:label>
 		<via:sparql>
<![CDATA[ 		
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?query ?label ?sparql where {
  ?query rdf:type via:TupleQuery .
  ?query rdfs:label ?label .
  ?query via:sparql ?sparql .
}
]]>
		</via:sparql>
	</via:TupleQuery>
	
	
	<via:TupleQuery rdf:about="#get_response_protocol_query">
		<rdfs:label>get_queries</rdfs:label>
 		<via:sparql>
<![CDATA[ 		
PREFIX via: <http://www.vacuity.ai/onto/via/1.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select distinct ?query ?label ?sparql where {
  ?query rdf:type via:TupleQuery .
  ?query rdfs:label ?label .
  ?query via:sparql ?sparql .
}
]]>
		</via:sparql>
	</via:TupleQuery>
	
	
	<via:TupleQuery rdf:about="#describe">
		<rdfs:label>get_queries</rdfs:label>
 		<via:sparql>
<![CDATA[
select ?s ?p ?o where {?s ?p ?o .}
]]>
		</via:sparql>
	</via:TupleQuery>
	
	
	<via:TupleQuery rdf:about="#get_channels">
		<rdfs:label>get_channels</rdfs:label>
 		<via:sparql>
<![CDATA[
select ?s ?p ?o where {?s ?p ?o .}
]]>
		</via:sparql>
	</via:TupleQuery>
	
		
</rdf:RDF>